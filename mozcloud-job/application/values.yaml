# Name to be used for all resources if not specified at the resource level.
# This should match the name of the parent Helm chart.
#nameOverride:

# Application code. This should match the `app_code` value in your tenant's
# values.yaml file.
#appCode:

# Component. This should match the `component` value in your tenant's
# values.yaml file.
#component:

# Environment. This should match the `environment` value in your tenant's
# values-<env>.yaml file.
#environment:

# Define your cron jobs here. These are jobs intended to be run on a schedule.
cronJobs: []
  #- name: my-cronjob

  #  # Configuration settings for cron jobs.
  #  config:
  #    # Configures the total number of jobs keep after cron jobs run. Default
  #    # values are:
  #    #
  #    #   successful: 1
  #    #   failed: 1
  #    #jobHistory:
  #    #  #successful: 1
  #    #  #failed: 1
  #
  #    # The schedule for the cron job. The value typically follows the cron or
  #    # Vixie cron formats. This is a required field.
  #    #
  #    # Cron syntax:
  #    #   ┌───────────── minute (0 - 59)
  #    #   │ ┌───────────── hour (0 - 23)
  #    #   │ │ ┌───────────── day of the month (1 - 31)
  #    #   │ │ │ ┌───────────── month (1 - 12)
  #    #   │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
  #    #   │ │ │ │ │              OR sun, mon, tue, wed, thu, fri, sat
  #    #   │ │ │ │ │
  #    #   │ │ │ │ │
  #    #   * * * * *
  #    #
  #    # Vixie cron examples:
  #    #   * 0-23/2 * * *  ──── every other hour
  #    #   * */2 * * *     ──── also every other hour
  #    #
  #    # You can also use the following macros:
  #    #   @yearly (or @annually) ──── equivalent to 0 0 1 1 *
  #    #   @monthly               ──── equivalent to 0 0 1 * *
  #    #   @weekly                ──── equivalent to 0 0 * * 0
  #    #   @daily (or @midnight)  ──── equivalent to 0 0 * * *
  #    #   @hourly                ──── equivalent to 0 * * * *
  #    #
  #    # Important: Schedules in cron or Vixie cron format must be quoted.
  #    #            Schedules using macros must be single quoted. Single quotes
  #    #            are recommended in general as a best practice.
  #    schedule: ''
  #
  #    # When Kubernetes creates CronJob resources, the Job controller will
  #    # immediately enforce the cron job in the schedule you define. If
  #    # "suspend" is enabled, Kubernetes will suspend future executions of the
  #    # cron job, effectively disabling it.
  #    #
  #    # This is unset/disabled by default.
  #    #suspend: false

  #  # This section follows the same format as jobs[].containers below.
  #  containers: []

  #  # This section follows the same format as jobs[].config below, with the
  #  # exception of "suspend", which is up above in "config".
  #  jobConfig: {}

  #  # Labels to use for this cron job.
  #  #labels: {}

# Define your jobs here. These are jobs intended to be run as single instances
# or as part of a deployment workflow (eg. database migration jobs).
jobs: []
  #- name: my-job

  #  # Enabling generateName will use the value for "name" as a prefix,
  #  # generating a suffix of random characters. This ensures each job will have
  #  # unique names, much like the jobs created by CronJob resources. This is
  #  # typically not necessary for most jobs.
  #  #
  #  # If enabled, a hyphen will be appended to the end of the job prefix if not
  #  # already set.
  #  #generateName: false

  #  # Details about the container(s) that need to be run for this job.
  #  containers:
  #    - name: ""
  #
  #      # The image should be specified in the "repo/image" format. This is
  #      # a required field.
  #      image: ""
  #
  #      # The tag to use for this image. The default is "latest".
  #      tag: latest

  #      # A command in the form of an array/list that serves as an entrypoint
  #      # to the container. This command is the default command that runs once
  #      # the container is started. This is not necessary if your image is
  #      # already configured to use your desired entrypoint.
  #      #command:

  #      # Arguments in the form of an array/list to pass to the
  #      # command/entrypoint. This is not necessary if the full command is
  #      # specified via your entrypoint or in "command" above.
  #      #args:
  #
  #      # Resource allocation for job container.
  #      #
  #      # Requests are required, however, if they are no specified, defaults
  #      # of "10m" (cpu) and "64Mi" (memory) will be used.
  #      #
  #      # For both CPU and memory, limits must be greater than or equal to
  #      # requests.
  #      #
  #      # If no limits are specified, they will be set to double the requests
  #      # values.
  #      #
  #      # CPU requests and limits must be positive numbers and use one of the
  #      # following formats:
  #      #
  #      #   int               (eg. 1)
  #      #   float             (eg. 1.0)
  #      #   millicpu notation (eg. 1000m)
  #      #
  #      # Memory requests and limits must be positive numbers and use any of
  #      # the following unit types: K, Ki, M, Mi, G, Gi.
  #      resources:
  #        cpu:
  #          requests: 10m
  #          #limits: 20m
  #        memory:
  #          requests: 64Mi
  #          #limits: 128Mi


  #  # Configuration settings for jobs.
  #  config:
  #    # The maximum amount of time, in seconds, that a job can run before being
  #    # forcefully terminated. If unset, no deadline will be enforced.
  #    #
  #    # activeDeadlineSeconds takes precedence over backoffLimit. If set and
  #    # job reaches the configured threshold, the job will be immediately
  #    # marked with a status of "Failed" regardless of any backoffLimit that
  #    # may be configured.
  #    #activeDeadlineSeconds:

  #    # The number of times a failed job will be re-run before it will be
  #    # marked with a status of "Failed". Certain jobs (eg. smoke tests) may
  #    # benefit from lower values. The default value is 6.
  #    #backoffLimit: 6

  #    # This is the number of instances of this job that can run in parallel.
  #    # The default value is 1, meaning only a single instance of the job can
  #    # run at a time.
  #    #parallelism: 1
  #
  #    # This determines if the job should be restarted if the job fails.
  #    # Options are "Never" and "OnFailure". Default is "Never".
  #    #restartPolicy: Never
  #
  #    # When Kubernetes creates Job resources, the Job controller will
  #    # immediately begin executing the job by creating pods. If "suspend" is
  #    # enabled, the job will be suspended from execution, effectively
  #    # disabling the job.
  #    #
  #    # This is unset/disabled by default.
  #    #suspend: false

  #    # The time, in seconds, that a job will be kept after completing or
  #    # failing before Kubernetes cleans it up.
  #    #ttlSecondsAfterFinished:

  #  # Argo CD settings.
  #  argo:
  #    # This configures the Argo hook deletion policies to apply to this job.
  #    # Options include:
  #    #
  #    #        HookSucceeded: The hook resource is deleted after the hook
  #    #                       succeeded (e.g. job completed successfully).
  #    #
  #    #           HookFailed: The hook resource is deleted after the hook
  #    #                       failed.
  #    #
  #    #   BeforeHookCreation: Hook resources are deleted before new ones are
  #    #                       created. Do not use this if generateName is
  #    #                       enabled.
  #    #
  #    # This should be configured as a comma-separated string (eg.
  #    # "BeforeHookCreation,HookSucceeded"). The default is
  #    # "BeforeHookCreation,HookSucceeded". Set to an empty string ("") to
  #    # prevent the chart from creating any hook deletion policies.
  #    hookDeletionPolicy: BeforeHookCreation,HookSucceeded

  #    # Hooks (or resource hooks) allow you to specify at what point the job
  #    # should execute relative to the application's sync operation in Argo CD.
  #    # Hooks should be specified as a comma-separated string. Possible values:
  #    #
  #    #     PreSync*: Job executes before the other manifests in the Helm
  #    #               chart.
  #    #
  #    #        Sync*: Job executes at the same time as the other manifests in
  #    #               the Helm chart.
  #    #
  #    #         Skip: Argo CD will skip this job during the sync operation.
  #    #
  #    #    PostSync*: Job executes after the other manifests in the Helm chart
  #    #               are applied successfully.
  #    #
  #    #     SyncFail: Job executes after a failed sync operation.
  #    #
  #    #   PostDelete: Job executes after all resources in an Argo CD
  #    #               application are deleted.
  #    #
  #    #   * The 3 sync phases commonly used when creating resource hooks.
  #    #
  #    # For example: to create a job that runs after every sync operation,
  #    # regardless of success, set "hooks" to "PostSync,SyncFail".
  #    #hooks:

  #    # Sync waves are used to define an order in which resources are applied
  #    # within a sync phase. Sync waves are configured using integers in
  #    # ascending order, where resources with lower-value sync waves are
  #    # applied first and resources with higher-value sync waves are applied
  #    # last. The default sync wave used for all resources is "0".
  #    #
  #    # Here is an example illustrating ordering resources with sync waves:
  #    #
  #    #  -2+: Evaluated first. Good for ConfigMap, ExternalSecret,
  #    #       ServiceAccount, or any other resources that are necessary
  #    #       to successfully apply resources in later sync waves.
  #    #
  #    #   -1: Evaluated next. Good for jobs that need to be executed before
  #    #       other resources in the chart (eg. database migrations).
  #    #
  #    #    0: Evaluated next. This is where all resources in the chart are
  #    #       applied unless otherwise specified.
  #    #
  #    #   1+: Evaluated last. Resources in this sync wave are applied after
  #    #       everything else in the chart is applied successfully. This can be
  #    #       useful for things like jobs that toggle off maintenance mode.
  #    #
  #    # Sync waves can be used in conjunction with resource hooks.
  #    #syncWave:
  #
  #  # Labels to use for this job.
  #  #labels: {}
